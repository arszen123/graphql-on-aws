service: serverless-todo-app-sync
frameworkVersion: '2'

plugins:
  - serverless-appsync-plugin
	
custom:
  appSync:
    name: todo-app-sync-backend
    authenticationType: AWS_IAM
    xrayEnabled: true
    schema: schema.graphql
    dataSources:
      - type: AWS_LAMBDA
        name: TodoItemLambdaDataSource
        description: Lambda DataSource for Todo itmes
        config:
          functionName: todo
          iamRoleStatements:
            - Effect: "Allow"
              Action:
                - "lambda:invokeFunction"
              Resource:
                - "*"
      - type: AMAZON_DYNAMODB
        name: TodoItemDynamoDbDataSource
        config:
          tableName: !Ref TodoTable
          iamRoleStatements:
            - Effect: "Allow"
              Action:
                - "dynamodb:*"
              Resource:
                - { Fn::GetAtt: [TodoTable, Arn] }
                # - { Fn::Join: [ '', [{Fn::GetAtt: [TodoTable, Arn]}, '/*']] }
    mappingTemplatesLocation: mapping-templates
    defaultMappingTemplates:
      response: default.response.vtl
    mappingTemplates:
      - ${file(lambda.mapping-templates.yml)}
      - ${file(dynamodb.mapping-templates.yml)}

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  tracing:
    lambda: true
  environment:
    TABLE_NAME: ${self:resources.Resources.TodoTable.Properties.TableName}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:*"
          Resource:
            Fn::GetAtt: [TodoTable, Arn]

functions:
  todo:
    handler: functions/todo.handler

resources:
  Resources:
    TodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TodoTableAppSync
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5